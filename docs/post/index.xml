<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>メモ一覧 on obメモ</title>
    <link>https://www.ig2.org/post/</link>
    <description>Recent content in メモ一覧 on obメモ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
	<atom:link href="https://www.ig2.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>タイピング</title>
      <link>https://www.ig2.org/typing/</link>
      <pubDate>Sun, 30 Aug 2020 15:11:27 +0900</pubDate>
      
      <guid>https://www.ig2.org/typing/</guid>
      <description>コードをタイプする速度を上げたいならば、コードをタイプするべきであって、寿司を食っている場合ではない。</description>
    </item>
    
    <item>
      <title>Linuxコマンド</title>
      <link>https://www.ig2.org/linux_cmd/</link>
      <pubDate>Tue, 25 Aug 2020 23:02:29 +0900</pubDate>
      
      <guid>https://www.ig2.org/linux_cmd/</guid>
      <description>有用なリンク  JM Project (Japanese)  ジョブ 　シェルから見た実行中のコマンドをジョブという。
コマンドをバックグラウンドジョブとして実行する $ コマンド &amp;amp;  例 $ find . -size +100M &amp;gt; out.txt &amp;amp; [1] 10322  　[1]：ジョブ番号、10322：プロセスID
実行中または一時停止中のジョブの一覧を表示する $ jobs  例 $ sleep 100 &amp;amp; [1] 10708 $ sleep 200 &amp;amp; [2] 10710 $ sleep 300 &amp;amp; [3] 10713 $ sleep 400 &amp;amp; [4] 10715 $ jobs [1] running sleep 100 [2] running sleep 200 [3] - running sleep 300 [4] + running sleep 400  　-：プリビアスジョブ、+：カレントジョブ</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://www.ig2.org/vim/</link>
      <pubDate>Tue, 25 Aug 2020 01:13:29 +0900</pubDate>
      
      <guid>https://www.ig2.org/vim/</guid>
      <description>ノーマルモード    コマンド 説明     q: Exコマンドのコマンドラインウィンドウ1を開く   q/ または q? 検索コマンドのコマンドラインウィンドウを開く       コマンド 説明     zt 現在行を画面の１行目にする   zz 現在行を画面の中央にする   zb 現在行を画面の最下行にする       コマンド 説明     !{motion}{filter} {motion} のテキストを外部プログラム {filter} でフィルタ処理する       コマンド 説明     [c カーソル前方の変更箇所へ移動   ]c カーソル後方の変更箇所へ移動    挿入モード    コマンド 説明     &amp;lt;C-o&amp;gt; １つコマンドを実行して挿入モードに戻る   &amp;lt;C-r&amp;gt;{register} 指定したレジスタの内容を挿入する    コマンドラインモード    コマンド 説明     :on[ly] アクティブでないウィンドウをすべて閉じる       コマンド 説明     &amp;lt;C-r&amp;gt;{register} 指定したレジスタの内容を挿入する   &amp;lt;C-f&amp;gt; :, /, ?</description>
    </item>
    
    <item>
      <title>tmux</title>
      <link>https://www.ig2.org/tmux/</link>
      <pubDate>Sat, 22 Aug 2020 04:57:28 +0900</pubDate>
      
      <guid>https://www.ig2.org/tmux/</guid>
      <description>　tmux は「ティマックス」と読む。「ティーマックス」ではない。
Your browser does not support the audio element.
（How to pronounce Tmux: howtopronounce.cc より）
コマンドラインから    コマンド 説明     tmux [new] 新しいセッションを作成してアタッチ   tmux new -s &amp;lt;session-name&amp;gt; 新しいセッションを指定した名前で作成しアタッチ   tmux ls すべてのセッションを一覧表示   tmux a [-t &amp;lt;session-name&amp;gt;] 指定したセッションにアタッチ。-t オプションを省略したときは最後にデタッチしたセッションにアタッチする（？）   tmux kill-server すべてのセッションを破棄し tmux サーバーを終了    tmux 内部から 　以下のコマンドはプレフィックスキーに続けて入力するもの。
ペイン    コマンド 説明     % 現在のペインを左右に分割   &amp;quot; 現在のペインを上下に分割   x 現在のペインを強制終了。コマンドラインで $ exit するほうが安全   q ペイン番号をすこしのあいだ表示   o ペイン番号が 1 大きいペインに移動    ウィンドウ    コマンド 説明     c 新しいウィンドウを作成   , 現在のウィンドウの名前を変更する   n ウィンドウ番号が 1 大きいウィンドウに移動   p ウィンドウ番号が 1 小さいウィンドウに移動   w 対話的にウィンドウを選択   &amp;amp; 現在のウィンドウを強制終了。すべてのペインで $ exit するほうが安全    セッション    コマンド 説明     $ 現在のセッションの名前を変更    </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://www.ig2.org/git/</link>
      <pubDate>Fri, 21 Aug 2020 00:02:36 +0900</pubDate>
      
      <guid>https://www.ig2.org/git/</guid>
      <description>所感 　Git を使いこなすためには Git の内部構造を理解することが必要不可欠。
有用なリンク   [To Be Decided ~]$ find /tags/git/
Git の内部構造を図を用いてわかりやすく解説している。各種コマンドの機能についても内部構造にもとづいた説明がなされており大変わかりやすい。古い記事から順にひと通り目を通すとよい。
  Git - Reference
 Git - gitglossary Documentation    Git - Book
  逆引きGit
  GitHub Git チートシート - GitHub Cheatsheets
  ブランチ 　ブランチとはあるコミットを指し示すポインタのこと。コミットの集合をブランチとよぶのはあやまり。
HEAD 　HEAD とはブランチまたはコミットを指し示すポインタのこと。 メタ的には「現在作業している場所」を指し示すものと解釈される。
detached HEAD 状態 　HEAD が detached HEAD 状態であるとは、HEAD が指し示すものがブランチでなくコミットであるときをいう。
この状態のときに Git の何らかの処理を行うと、通常とは違う結果をもたらすことがある。たとえば、HEAD が detached HEAD 状態のときに何度かコミットしてから別のブランチまたはコミットにチェックアウトすると、将来自動的に行われる（または手動で行う）garbage collection という処理によってそれらのコミットはすべて破棄される。</description>
    </item>
    
    <item>
      <title>GitHub</title>
      <link>https://www.ig2.org/github/</link>
      <pubDate>Thu, 20 Aug 2020 23:32:17 +0900</pubDate>
      
      <guid>https://www.ig2.org/github/</guid>
      <description>二段階認証設定後に HTTP でプッシュする方法 　自分の GitHub ページでパーソナルアクセストークンを取得する必要がある。 コマンドラインで入力するパスワードは、GitHub アカウントのパスワードではなく取得したパーソナルアクセストークン。
  リモートの URL の変更 - GitHub Docs
 2要素認証 を有効にしている場合は、パーソナルアクセストークンを作成して、GitHub パスワードのかわりに使用することができます。
 「使用することができます」ではなく「使用しなくてはなりません」が正しいのでは。
  個人アクセストークンを使用する - GitHub Docs
  GitHub Error: Authentication Failed from the Command Line | by Ginny Fahs | Medium
  GitHubに二段階認証を設定した後にGit操作できない時の解決策 - Qiita
 repoからgistまでを全てチェックしてGenerate token
 プッシュするだけなら repo だけでよい。
  </description>
    </item>
    
  </channel>
</rss>